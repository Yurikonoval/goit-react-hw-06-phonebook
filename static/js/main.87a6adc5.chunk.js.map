{"version":3,"sources":["components/Filter/Filter.module.css","redux/actions.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","redux/reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","actions","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","filterChange","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normilizedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleChange","event","target","value","reset","action","onSubmit","preventDefault","find","contact","alert","className","s","form","label","namespan","type","onChange","input","placeholder","numberspan","button","Filter","labeltext","e","ContactList","list","map","item","contactData","onClick","onDeleteContact","App","createReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.87a6adc5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2L_Cd\",\"labeltext\":\"Filter_labeltext__3gXmI\",\"input\":\"Filter_input__2qiIB\"};","import { createAction } from '@reduxjs/toolkit';\nimport shortid from 'shortid';\n// import types from './types';\n\nconst addContact = createAction('phonebook/addContact', ({ name, number }) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\n\nconst deleteContact = createAction('phonebook/deleteContact');\n\nconst filterChange = createAction('phonebook/filterChange');\n\n// const addContact = ({ name, number }) => ({\n//   type: types.ADD,\n//   payload: {\n//     id: shortid.generate(),\n//     name: name,\n//     number: number,\n//   },\n// });\n\n// const deleteContact = id => ({\n//   type: types.DELETE,\n//   payload: id,\n// });\n\n// const filterChange = value => ({\n//   type: types.FILTER_CHANGE,\n//   payload: value,\n// });\n\nconst actions = { addContact, deleteContact, filterChange };\n\nexport default actions;\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const items = getContacts(state);\n  const filter = getFilter(state);\n  const normilizedFilter = filter.toLowerCase();\n\n  return items.filter(({ name }) =>\n    name.toLowerCase().includes(normilizedFilter),\n  );\n};\n\n// export const getVisibleContacts = (allContacts, filter) => {\n//   const normilizedFilter = filter.toLowerCase();\n\n//   return allContacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normilizedFilter),\n//   );\n// };\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport actions from '../../redux/actions';\nimport { getContacts } from '../../redux/selectors';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (name === '' && number === '') {\n      alert('Заполните все поля контакта');\n      return;\n    }\n    contacts.find(contact => name.toLowerCase() === contact.name.toLowerCase())\n      ? alert(`${name} is already in contacts`)\n      : dispatch(actions.addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} className={s.form}>\n      <label className={s.label}>\n        <span className={s.namespan}>Name</span>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          className={s.input}\n          placeholder=\"Enter name\"\n        />\n      </label>\n      <label className={s.label}>\n        <span className={s.numberspan}>Number</span>\n        <input\n          type=\"text\"\n          name=\"number\"\n          placeholder=\"Enter phone number\"\n          value={number}\n          onChange={handleChange}\n          className={s.input}\n        />\n      </label>\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: ({ name, number }) =>\n//     dispatch(actions.addContact({ name, number })),\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// import PropTypes from 'prop-types';\nimport actions from '../../redux/actions';\nimport { getFilter } from '../../redux/selectors';\nimport s from './Filter.module.css';\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.label}>\n      <span className={s.labeltext}>Find contacts by name</span>\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter name\"\n        value={value}\n        onChange={e => dispatch(actions.filterChange(e.target.value))}\n      />\n    </label>\n  );\n}\n\n// const mapStateToProps = state => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: e => dispatch(actions.filterChange(e.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/actions';\nimport { getVisibleContacts } from '../../redux/selectors';\nimport s from './ContactList.module.css';\n\nexport default function ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => {\n    dispatch(actions.deleteContact(id));\n  };\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.item}>\n          <p className={s.contactData}>\n            {name}: {number}\n          </p>\n          <button\n            className={s.button}\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getVisibleContacts(items, filter),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onDelete: id => dispatch(actions.deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n};\n","import React from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\nimport './App.css';\n\nfunction App() {\n  // useEffect(() => {\n  //   const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n  //   if (parsedContacts !== null) {\n  //     setContacts(parsedContacts);\n  //   }\n  // }, []);\n\n  // useEffect(() => {\n  //   localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Phonebook</h1>\n      <ContactForm />\n      <p className=\"title statistics\">Statistics</p>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './actions';\n// import types from './types';\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.filterChange]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case types.FILTER_CHANGE:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n// const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       return state.find(\n//         contact => contact.name.toLowerCase() === payload.name.toLowerCase(),\n//       )\n//         ? alert(`${payload.name} is already in contacts`)\n//         : [...state, payload];\n\n//     case types.DELETE:\n//       return state.filter(({ id }) => id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n","// import { combineReducers } from 'redux';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './reducer';\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\n// const middleware = [\n//   ...getDefaultMiddleware({\n//     serializableCheck: {\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n//     },\n//   }),\n//   logger,\n// ];\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware: [\n    ...getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n    logger,\n  ],\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1dOms\",\"label\":\"ContactForm_label__1PMoy\",\"namespan\":\"ContactForm_namespan__vrF03\",\"numberspan\":\"ContactForm_numberspan__1VGBi\",\"input\":\"ContactForm_input__52hLS\",\"button\":\"ContactForm_button__aJvjT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__281hw\",\"button\":\"ContactList_button__2UFVa\",\"contactData\":\"ContactList_contactData__3h_lr\",\"item\":\"ContactList_item__1EsPp\"};"],"sourceRoot":""}